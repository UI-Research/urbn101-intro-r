---
title: "Data Munging 1"
author: "R Users Group"
date: today
output:
  html:
    code-line-numbers: true
    number-sections: true
    number-depth: 2
    embed-resources: true
    code-fold: show
    toc: true
    css: style.scss
editor_options: 
  chunk_output_type: console
---

## Review

-   Console/Environment/Script
-   Comment your code with `#` and read your error messages

## Assignment

`<-` is the assignment operator. An object created on the right side of an assignment operator is assigned to a name on the left side of an assignment operator. Assignment operators are important for saving the consequences of operations and functions. Without assignment, the result of a calculation is not saved for use in future calculations. Operations without assignment operators will typically be printed to the console but not saved for future use.

```{r}
a <- 1
b <- 2

c <- a + b

c

```

## Tidy Data

> The [tidyverse](https://www.tidyverse.org/) is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. \~ tidyverse.org

`library(tidyverse)` contains:

-   [ggplot2](https://ggplot2.tidyverse.org), for data visualization.
-   [dplyr](https://dplyr.tidyverse.org), for data manipulation.
-   [tidyr](https://tidyr.tidyverse.org), for data tidying.
-   [readr](https://readr.tidyverse.org), for data import.
-   [purrr](https://purrr.tidyverse.org), for functional programming.
-   [tibble](https://tibble.tidyverse.org), for tibbles, a modern re-imagining of data frames.
-   [stringr](https://github.com/tidyverse/stringr), for strings.
-   [forcats](https://github.com/hadley/forcats), for factors.

### Tidy data

The defining opinion of the tidyverse is its wholehearted adoption of tidy data. Tidy data has three features:

1.  Each variable forms a column.
2.  Each observation forms a row.
3.  Each type of observational unit forms a dataframe. (This is from the paper, not the book)

![](www/images/tidy-data.png)

Source: [R for data science](https://r4ds.had.co.nz/transform.html)

> Tidy datasets are all alike, but every messy dataset is messy in its own way. \~ [Hadley Wickham](https://r4ds.had.co.nz/tidy-data.html)

The tidy approach to data science is powerful because it breaks data work into two distinct parts. First, get the data into a tidy format. Second, use tools optimized for tidy data. By standardizing the data structure for most community-created tools, the framework oriented diffuse development and reduced the friction of data work.

## Exercise 0: Creating a Project and Loading Packages

If you are using a different computer or didn't attend sessions 0 or 1, follow steps 1 and 2. If not- skip to step 3.

<font color="#55b748">**Step 1:**</font> Open RStudio. File \> New Project \> New Directory \> Select the location where you would like to create a new folder that houses your R Project. Call it `urbn101`.

<font color="#55b748">**Step 2:**</font> Open an `.R` script with the button in the top left (sheet with a plus sign icon). Save the script as `02_data-munging1.R`.

<font color="#55b748">**Step 3:**</font> If you have not previously installed `library(tidyverse)`: submit `install.packages("tidyverse")` to the Console (type and hit enter)

We'll focus on the key dplyr syntax using the March 2020 Annual Social and Economic Supplement (ASEC) to the Current Population Survey (CPS). Run the following code to load the data.

<font color="#55b748">**Step 4:**</font> Add and run the following code to load ASEC data.

```{r}
#| label: load-asec
#| message: false

library(tidyverse)

asec <- read_csv(
  paste0(
    "https://raw.githubusercontent.com/awunderground/awunderground-data/",
    "main/cps/cps-asec.csv"
  )
)

```

We can use `glimpse(asec)` to quickly view the data. We can also use `View(asec)` to open up `asec` in RStudio.

<br>

```{r glimpse-asec}
glimpse(x = asec)

```

<br>

We're going to learn seven functions and one new piece of syntax from `library(dplyr)` that will be our main tools for manipulating tidy frames. These functions and a few extensions outlined in the [Data Transformation Cheat Sheet](https://rstudio.com/resources/cheatsheets/) are the core of data analysis in the Tidyverse.

## 1. `select()`

`select()` drops columns from a dataframe and/or reorders the columns in a dataframe. The arguments after the name of the dataframe should be the names of columns you wish to keep, without quotes. All other columns not listed are dropped.

<br>

```{r select-example}
select(.data = asec, year, month, serial)

```

<br>

This works great until the goal is to select 99 of 100 variables. Fortunately, `-` can be used to remove variables. You can also select all but multiple variables by listing them with the `-` symbol separated by commas.

<br>

```{r select-substract-example}
select(.data = asec, -asecflag)
```

<br>

### `r kableExtra::text_spec("Exercise 1", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  Select `pernum` and `inctot` from `asec`.

#### Solution

1.  Select `pernum` and `inctot` from `asec`.

```{r}
#| eval: false

select(.data = asec, inctot, asec)

```

:::

$$\cdots$$

## 2. `rename()`

`rename()` renames columns in a data frame. The pattern is `new_name = old_name`.

<br>

```{r rename-example}
rename(.data = asec, serial_number = serial)

```

<br>

You can also rename a selection of variables using `rename_with()`. The `.cols` argument is used to select the columns to rename and takes a `tidyselect` statement like those we introduced above. Here, we're using the `where()` selection helper which selects all columns where a given condition is TRUE. The default value for the `.cols` argument is `everything()` which selects all columns in the dataset.

<br>

```{r rename_all-example}
rename_with(.data = asec, .fn = toupper, .cols = where(is.numeric))

```

<br>

Most `dplyr` functions can rename columns simply by prefacing the operation with `new_name =`. For example, this can be done with `select()`:

<br>

```{r select-with-rename}
select(.data = asec, year, month, serial_number = serial)

```

<br>

## 3. `filter()`

`filter()` reduces the number of observations in a dataframe. Every column in a dataframe has a name. Rows do not necessarily have names in a dataframe, so rows need to be filtered based on logical conditions.

`==`, `<`, `>`, `<=`, `>=`, `!=`, `%in%`, and `is.na()` are all operators that can be used for logical conditions. `!` can be used to negate a condition and `&` and `|` can be used to combine conditions. `|` means or.

<br>

```{r filter-example}
# return rows with pernum of 1 and incwage > $100,000
filter(.data = asec, pernum == 1 & incwage > 100000)

```

[IPUMS CPS](https://cps.ipums.org/cps-action/variables/group) contains full documentation with information about `pernum` and `incwage`.

<br>

### `r kableExtra::text_spec("Exercise 2", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  Filter `asec` to rows with `month` equal to `"March"`.
2.  Filter `asec` to rows with `inctot` less than `999999999`.
3.  Filter `asec` to rows with `pernum` equal to `3` and `inctot` less than `999999999`.

#### Solution

1.  Filter `asec` to rows with `month` equal to `"March"`.
2.  Filter `asec` to rows with `inctot` less than `999999999`.
3.  Filter `asec` to rows with `pernum` equal to `3` and `inctot` less than `999999999`.

```{r}
#| eval: false

filter(asec, month == "March")

filter(asec, inctot < 999999999)

filter(asec, pernum == 3, inctot < 999999999)


```

:::

## 4. `arrange()`

`arrange()` sorts the rows of a data frame in alpha-numeric order based on the values of a variable or variables. The dataframe is sorted by the first variable first and each subsequent variable is used to break ties. `desc()` is used to reverse the sort order for a given variable.

<br>

```{r arrange-example}
# sort pernum is descending order because high pernums are interesting
arrange(.data = asec, desc(pernum))

```

<br>

### `r kableExtra::text_spec("Exercise 3", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  Sort `asec` in descending order by `pernum` and ascending order by `inctot`.

#### Solution

1.  Sort `asec` in descending order by `pernum` and ascending order by `inctot`.

```{r}
#| eval: false

arrange(asec, desc(pernum), inctot)

```

:::

## 5. `mutate()`

`mutate()` creates new variables or edits existing variables. We can use arithmetic arguments, such as `+`, `-`, `*`, `/`, and `^`. We can also custom functions and functions from packages. For example, we can use `library(stringr)` for string manipulation and `library(lubridate)` for date manipulation.

<br>

Variables are created by adding a new column name, like `inctot_adjusted`, to the left of `=` in `mutate()`.

```{r mutate-example-new-var}
# adjust inctot for underreporting
mutate(.data = asec, inctot_adjusted = inctot * 1.1)

```

<br>

Variables are edited by including an existing column name, like `inctot`, to the left of `=` in `mutate()`.

```{r mutate-example-overwrite}
# adjust income because of underreporting
mutate(.data = asec, inctot = inctot * 1.1)

```

<br>

Conditional logic inside of `mutate()` with functions like `if_else()` and `case_when()` is key to mastering data munging in R.

### `r kableExtra::text_spec("Exercise 4", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  Create a new variable called `in_poverty`. If `offtotval` is less than `offcutoff` then use `"Below Poverty Line"`. Otherwise, use `"Above Poverty Line"`. *Hint:* `if_else()` is useful and works like the IF command in Microsoft Excel.

#### Solution

1.  Create a new variable called `in_poverty`. If `offtotval` is less than `offcutoff` then use `"Below Poverty Line"`. Otherwise, use `"Above Poverty Line"`. *Hint:* `if_else()` is useful and works like the IF command in Microsoft Excel.

```{r}
#| eval: false
mutate(
  asec,
  in_poverty = if_else(
    condition = offtotval < offcutoff, 
    true = "Below Poverty Line", 
    false = "Above Poverty Line"
  )
)

```

:::

## `%>%`

Data munging is tiring when each operation needs to be assigned to a name with `<-`. The pipe, `%>%`, allows lines of code to be chained together so the assignment operator only needs to be used once.

Consider this fake code [example from Hadley Wickham](https://twitter.com/hadleywickham/status/1359852563726819332?lang=en):

```{r}
#| eval: false
I %>% 
  tumble(out_of = "bed") %>% 
  stumble(to = "the kitchen") %>% 
  pour(who = "myself", unit = "cup", what = "ambition") %>% 
  yawn() %>% 
  stretch() %>% 
  try(come_to_life())

```

<br>

`%>%` passes the output from function as the first argument in a subsequent function. For example, this line can be rewritten:

<br>

```{r pipe-example, eval = FALSE}
# old way
mutate(.data = asec, inctot_adjusted = inctot * 1.1)

# new way
asec %>%
  mutate(inctot_adjusted = inctot * 1.1)

```

<br>

See the power:

<br>

```{r pipe-data-cleaning}
new_asec <- asec %>%
  filter(pernum == 1) %>%
  select(year, month, pernum, inctot) %>%
  mutate(inctot_adjusted = inctot * 1.1) %>%
  select(-inctot)

new_asec

```

<br>

## 6. `summarize()`

`summarize()` collapses many rows in a dataframe into fewer rows with summary statistics of the many rows. `n()`, `mean()`, and `sum()` are common summary statistics. Renaming is useful with `summarize()`!

<br>

```{r summarize-example}
# summarize without renaming the statistics
asec %>%
  summarize(mean(ftotval), mean(inctot))

# summarize and rename the statistics
asec %>%
  summarize(
    mean_ftotval = mean(ftotval), 
    mean_inctot = mean(inctot)
  )

```

<br>

`summarize()` returns a data frame. This means all dplyr functions can be used on the output of `summarize()`. This is powerful! Manipulating summary statistics in Stata and SAS can be a chore. Here, it's just another dataframe that can be manipulated with a tool set optimized for dataframes: dplyr.

## 7. `group_by()`

`group_by()` groups a dataframe based on specified variables. `summarize()` with grouped dataframes creates subgroup summary statistics. `mutate()` with `group_by()` calculates grouped summaries for each row.

<br>

```{r group_by-example}
asec %>%
  group_by(pernum) %>%
  summarize(
    n = n(),
    mean_ftotval = mean(ftotval), 
    mean_inctot = mean(inctot)
  )

```

<br>

Dataframes can be grouped by multiple variables.

Grouped tibbles include metadata about groups. For example, `Groups:   pernum, offpov [40]`. One grouping is dropped each time `summarize()` is used. It is easy to forget if a dataframe is grouped, so it is safe to include `ungroup()` at the end of a section of functions.

<br>

```{r group_by-example-many-groups}
asec %>%
  group_by(pernum, offpov) %>%
  summarize(
    n = n(),
    mean_ftotval = mean(ftotval), 
    mean_inctot = mean(inctot)
  ) %>%
  arrange(offpov) %>%
  ungroup()

```

<br>

### `r kableExtra::text_spec("Exercise 5", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  `filter()` to only include observations with `"In Poverty Universe"` in `offpovuniv`.
2.  `group_by()` `offpov`.
3.  Use `summarize()` and `n()` to count the number of observations in poverty.

#### Solution

1.  `filter()` to only include observations with `"In Poverty Universe"` in `offpovuniv`.
2.  `group_by()` `offpov`.
3.  Use `summarize()` and `n()` to count the number of observations in poverty.

```{r}
#| eval: false

asec %>%
  filter(offpovuniv == "In Poverty Universe") %>%
  group_by(offpov) %>%
  summarize(n())

```

:::

### `r kableExtra::text_spec("Exercise 6", color = "#1696d2")`

::: {.panel-tabset}

#### Prompt

1.  `filter()` to only include observations with `"In Poverty Universe"`.
2.  `group_by()` `cpsid`.
3.  Use `mutate(family_size = n())` to calculate the family size for each observation in `asec`.
4.  `ungroup()`
5.  `group_by()` `family_size`, and `offpov`.
6.  Use `summarize()` and `n()` to see how many families of each size are experiencing poverty. 

#### Solution

1.  `filter()` to only include observations with `"In Poverty Universe"`.
2.  `group_by()` `cpsid`.
3.  Use `mutate(family_size = n())` to calculate the family size for each observation in `asec`.
4.  `ungroup()`
5.  `group_by()` `family_size`, and `offpov`.
6.  Use `summarize()` and `n()` to see how many families of each size are experiencing poverty. 

```{r}
#| eval: false

asec %>%
  filter(offpovuniv == "In Poverty Universe") %>%
  group_by(cpsid) %>%
  mutate(family_size = n()) %>%
  ungroup() %>%
  group_by(family_size, offpov) %>%
  summarize(n())

```

:::

**Are the estimates from the previous two exercises correct?**

Let's look at a [Census Report](https://www.census.gov/library/publications/2020/demo/p60-270.html) to see how many people were in poverty in 2019. We estimated about 16,500 people. The Census Bureau says 34.0 million people.

No! We did not account for sampling weights, so our estimates are incorrect. [`library(srvyr)`](https://cran.r-project.org/web/packages/srvyr/index.html) has tools for weighted estimation with complex surveys.

## Resources

-   [R for Data Science: data transformation](https://r4ds.hadley.nz/data-transform)
-   [Data wrangling cheat sheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
